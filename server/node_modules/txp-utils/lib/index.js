"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValidValues = exports.contrast = exports.getType = exports.join = exports.removal = exports.getChainObj = exports.filterObj = void 0;
const logger = __importStar(require("./node/logger"));
/** 对象类 start */
/**
 * 描述：过滤对象，过滤掉值为null、undefined、NaN的键
 * @author DaoYuan
 * @date 2020-06-13
 * @param {any} param:需要过滤的对象
 * @param {any} fun:扩展过滤的方法
 * @param {any} key?:string
 * @param {any} obj?:object
 * @returns {any}
 */
function filterObj(param, fun) {
    const obj = {};
    Object.entries(param).forEach(([key, value]) => {
        // 默认过滤
        if (value !== null && value !== undefined && !Number.isNaN(value)) {
            obj[key] = value;
        }
        // 扩展过滤
        if (fun && fun(value, key, param)) {
            obj[key] = value;
        }
    });
    return obj;
}
exports.filterObj = filterObj;
/**
 * 描述
 * @author DaoYuan
 * @date 2020-06-13
 * @param {any} obj:对象值,如：obj
 * @param {any} str:链式字符串，如：obj.a.b.c
 * @returns {any}
 */
function getChainObj(obj, str) {
    const arr = str.split('.');
    let value = obj;
    try {
        arr.forEach((element, index) => {
            if (index > 0) {
                if (value[element] !== undefined) {
                    value = value[element];
                }
                else {
                    throw new Error('访问的值为undefined');
                }
            }
        });
    }
    catch (error) {
        value = '';
        console.error(`访问对象:${str}错误`, `错误信息:${error}`);
    }
    return value;
}
exports.getChainObj = getChainObj;
/** 对象类 end */
/** 数组类 start */
function removal(list, key) {
    // 对象去重
    if (key) {
        return list.filter((item, index, arr) => typeof item === 'object' &&
            arr.findIndex((childItem) => childItem[key] === item.key) === index);
    }
    // 字符串去重
    return [...new Set(list)];
}
exports.removal = removal;
/** 数组类 start */
/** 其他类 start */
/**
 * 描述:把数组里的除''和NaN的字符串和数字连接成字符串
 * @author DaoYuan
 * @date 2020-06-13
 * @param {any} list:any[]=[]
 * @param {any} mark:string='_'
 * @returns {any}
 */
function join(list = [], mark = '_') {
    const arr = list.filter((item) => {
        if (typeof item === 'string' || typeof item === 'number') {
            if (item === '' || Number.isNaN(item)) {
                return false;
            }
            return true;
        }
        return false;
    });
    const str = arr.join(mark);
    return str;
}
exports.join = join;
/**
 * 描述 获取数据类型
 * @author DaoYuan
 * @date 2020-06-24
 * @param {any} params:any
 * @returns {any}
 */
function getType(params) {
    const str = Object.prototype.toString.call(params);
    const reg = /\[object ([a-zA-Z]*)\]/;
    // @ts-ignore
    const type = reg.exec(str)[1];
    return type;
}
exports.getType = getType;
function contrast([main, assistant], fun) {
    const newMain = {};
    const newAssistant = {};
    Object.entries(main).map(([key, value]) => {
        if (key in assistant) {
            const [mainValue, assistantValue] = fun([value, assistant[key]]);
            newMain[key] = mainValue;
            newAssistant[key] = assistantValue;
        }
    });
    return [newMain, newAssistant];
}
exports.contrast = contrast;
function getValidValues(params, defaultValues = '') {
    if (['', null, NaN, undefined].includes(params)) {
        return defaultValues;
    }
    return params;
}
exports.getValidValues = getValidValues;
/** 其他类 end */
exports.default = {
    filterObj,
    getChainObj,
    join,
    removal,
    contrast,
    getValidValues,
    node: {
        logger,
    },
};
